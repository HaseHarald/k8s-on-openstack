- name: Get cloud configuration
  tags: bootstrap
  os_client_config:

- name: Create OpenStack instance through flavor ram
  os_server:
    security_groups: "sg-{{ name }}-master"
    name: "{{ master_name }}"
    image: "{{ master_image }}"
    boot_from_volume: "{{ master_boot_from_volume }}"
    terminate_volume: "{{ master_terminate_volume }}"
    volume_size: "{{ master_volume_size }}"
    key_name: "{{ key_name }}"
    flavor_ram: "{{ master_flavor_ram }}"
    nics:
      - net-name: "{{ network_name }}"
    floating_ip_pools: "{{ floating_ip_pools }}"
    userdata: |
      #cloud-config
      package_upgrade: true
      hostname: "{{ master_name }}"
      manage_etc_hosts: false
      packages:
        - python
        - python-simplejson
  when: state == "present" and not master_flavor_name
  register: "instance_from_ram"

- name: Create OpenStack instance through flavor name
  os_server:
    security_groups: "sg-{{ name }}-master"
    name: "{{ master_name }}"
    image: "{{ master_image }}"
    boot_from_volume: "{{ master_boot_from_volume }}"
    terminate_volume: "{{ master_terminate_volume }}"
    volume_size: "{{ master_volume_size }}"
    key_name: "{{ key_name }}"
    flavor: "{{ master_flavor_name }}"
    nics:
      - net-name: "{{ network_name }}"
    floating_ip_pools: "{{ floating_ip_pools }}"
    userdata: |
      #cloud-config
      package_upgrade: true
      hostname: "{{ master_name }}"
      manage_etc_hosts: false
      packages:
        - python
        - python-simplejson
  when: state == "present" and master_flavor_name
  register: "instance_from_name"

- name: Agregate master instance facts
  set_fact:
    instance: "{{ instance_from_ram if not nodes_flavor_name else instance_from_name }}"

- name: Delete OpenStack instances
  os_server:
    name: "{{ master_name }}"
    state: absent
  when: state == "absent"

- name: Update inventory
  add_host:
    name: "{{ instance.server.name }}"
    ansible_ssh_host: "{{ instance.openstack.accessIPv4 }}"
    ansible_ssh_user: ubuntu
    groupname: master
    routeruuid: "{{ routeruuid }}"
    subnetuuid: "{{ subnetuuid }}"
  when: state == "present"

- name: Wait during instances boot
  tags: bootstrap
  wait_for:
    host: "{{ instance.openstack.accessIPv4 }}"
    port: 22
    search_regex: OpenSSH
  when: state == "present"

- name: Allow SSH keys on first connection
  shell: "ssh-keyscan {{ instance.openstack.accessIPv4 }} >> ~/.ssh/known_hosts"
  when: state == "present"
